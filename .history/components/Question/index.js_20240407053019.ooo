import styles from "./Question.module.css";
import { useState, useEffect } from "react";
import { inventory } from "@/data/inventory";

export default function Question() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [finalAnswerObject, setFinalAnswerObject] = useState({});

  const { questions } = inventory;
  const { question, answers } = questions[currentQuestion];

  const handleAnswerInput = (key, answerTag, answerValue) => {
    setFinalAnswerObject((prevAnswers) => ({
      ...prevAnswers,
      [key]: { tag: answerTag, value: answerValue }
    }));
  };

  const handleAnswerSelect = (key, answerTag) => {
    setFinalAnswerObject((prevAnswers) => ({
      ...prevAnswers,
      [key]: { tag: answerTag }
    }));
  };

  const handleQuestion = (action) => {
    action === 'next'
      ? setCurrentQuestion(prevIndex => prevIndex + 1)
      : setCurrentQuestion(nextIndex => nextIndex - 1);

    // Optionally, you can reset the selected answer upon navigating to a new question
    // setFinalAnswerObject({});
  };

  useEffect(() => {
    console.log('finalAnswerObject', finalAnswerObject);
  }, [finalAnswerObject]);

  return (
    <div className={styles.quizContainer}>
      <div>Question {currentQuestion + 1}/{questions.length}</div>
      <div className={styles.questionContainer}>
        <form onSubmit={(e) => {
          e.preventDefault();
          handleQuestion('next');
        }}>
          <label>{question}</label><br />
          {answers.map((k, i) => (
            <div key={k.answerId} className={styles.answerContainer}>
              <label className={styles.label} htmlFor={k.answerTag}>{k.answerId}. {k.answerLabel}</label>
              {k.answerDesc && <span className={styles.description}>{k.answerDesc}</span>}
              <input
                type={currentQuestion === 0 ? "number" : "checkbox"}
                id={k.answerTag}
                name={k.answerTag}
                value={k.answerTag}
                onChange={(e) => {
                  currentQuestion === 0
                    ? handleAnswerInput(currentQuestion, k.answerTag, e.target.value)
                    : handleAnswerSelect(currentQuestion, k.answerTag);
                }}
                checked={finalAnswerObject[currentQuestion]?.tag === k.answerTag}
              />
            </div>
          ))}
          <button type="submit">Next</button>
        </form>
        {currentQuestion !== 0 && (
          <button onClick={() => handleQuestion('prev')}>Prev</button>
        )}
      </div>
    </div>
  );
}